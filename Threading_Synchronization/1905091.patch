diff --git a/.vscode/c_cpp_properties.json b/.vscode/c_cpp_properties.json
new file mode 100644
index 0000000..c42c5ef
--- /dev/null
+++ b/.vscode/c_cpp_properties.json
@@ -0,0 +1,17 @@
+{
+    "configurations": [
+        {
+            "name": "Linux",
+            "includePath": [
+                "${workspaceFolder}/**",
+                "${workspaceFolder}"
+            ],
+            "defines": [],
+            "compilerPath": "/usr/bin/gcc",
+            "cStandard": "c17",
+            "cppStandard": "gnu++17",
+            "intelliSenseMode": "linux-gcc-x64"
+        }
+    ],
+    "version": 4
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..6e91a85 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer\
+
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +156,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/conditional_var.h b/kernel/conditional_var.h
new file mode 100644
index 0000000..0c052c8
--- /dev/null
+++ b/kernel/conditional_var.h
@@ -0,0 +1,6 @@
+#include "spinlock.h"
+struct conditional_var {
+    int id;
+    struct spinlock mutex;
+    struct proc* queue;
+};
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..b32d933 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -1,3 +1,6 @@
+#include "spinlock.h"
+#include "kernel/conditional_var.h"
+struct conditional_var;
 struct buf;
 struct context;
 struct file;
@@ -8,6 +11,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+#define NPROC 64
 
 // bio.c
 void            binit(void);
@@ -106,6 +110,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void proc_freepagetable_th(pagetable_t, uint64);
+int thread_create(uint64 fcn,uint64 arg,uint64 stack);
+int thread_join(int thread_id);
+void conditional_wait(int id);
+void conditional_wakeup(int id);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -146,6 +155,7 @@ extern uint     ticks;
 void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
+extern struct conditional_var conditionals[NPROC];
 void            usertrapret(void);
 
 // uart.c
@@ -173,6 +183,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void uvmfree_th(pagetable_t, uint64);
+int uvmmirror(pagetable_t, pagetable_t, uint64 sz);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..66df6f9 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -124,6 +124,7 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->condvar = -1;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -158,8 +159,11 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if(p->pagetable) {
+    if(p->is_thread) proc_freepagetable_th(p->pagetable , p->sz);
+    else proc_freepagetable(p->pagetable, p->sz);
+  }
+  p->condvar = -1;
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -205,6 +209,12 @@ proc_pagetable(struct proc *p)
   return pagetable;
 }
 
+void proc_freepagetable_th(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmfree_th(pagetable, sz);
+}
 // Free a process's page table, and free the
 // physical memory it refers to.
 void
@@ -681,3 +691,128 @@ procdump(void)
     printf("\n");
   }
 }
+
+int thread_create(uint64 fcn, uint64 arg, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0) {
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  np->is_thread = 1;
+  np->trapframe->epc = fcn;
+  np->trapframe->a0 = arg;
+  np->trapframe->sp = stack + 4096 - 1;
+  np->trapframe->sp -= np->trapframe->sp%16;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+int thread_join(int thread_id){
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->pid == thread_id){
+
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+void conditional_wait(int condvar_id) {
+  struct conditional_var condvar = conditionals[condvar_id];
+
+  acquire(&condvar.mutex);
+  struct proc* p;
+  p = myproc();
+
+  acquire(&p->lock);
+  p->condvar = condvar_id;
+  p->state = SLEEPING;
+  release(&p->lock);
+
+  release(&condvar.mutex);
+}
+
+void conditional_wakeup(int condvar_id) {
+  struct conditional_var condvar = conditionals[condvar_id];
+
+  acquire(&condvar.mutex);
+  struct proc* p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->condvar == condvar_id && p->state == SLEEPING) {
+        p->state = RUNNABLE;
+        p->condvar = -1;
+        release(&p->lock);
+        break;
+      }
+      release(&p->lock);
+    }
+  }
+  release(&condvar.mutex);
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..7c389d9 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -81,6 +81,7 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -104,4 +105,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int condvar;
+  int is_thread;
 };
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
index 4392820..b05bac6 100644
--- a/kernel/spinlock.h
+++ b/kernel/spinlock.h
@@ -1,4 +1,6 @@
-// Mutual exclusion lock.
+#ifndef __SPINLOCK__
+#define __SPINLOCK__
+
 struct spinlock {
   uint locked;       // Is the lock held?
 
@@ -7,3 +9,4 @@ struct spinlock {
   struct cpu *cpu;   // The cpu holding the lock.
 };
 
+#endif
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ef1e54d 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_conditional_wait(void);
+extern uint64 sys_conditional_wakeup(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_conditional_wait] sys_conditional_wait,
+[SYS_conditional_wakeup] sys_conditional_wakeup,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..8ec23da 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_conditional_wait 25
+#define SYS_conditional_wakeup 26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..8ef094d 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,44 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return thread_create(fcn, arg, stack);
+}
+uint64
+sys_thread_join(void)
+{
+  int thread_id;
+  argint(0, &thread_id);
+  return thread_join(thread_id);
+}
+uint64
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0;
+}
+
+
+uint64
+sys_conditional_wait(void)
+{
+  int condvar_id;
+  argint(0, &condvar_id);
+  conditional_wait(condvar_id);
+  return 0;
+}
+uint64
+sys_conditional_wakeup(void)
+{
+  int condvar_id;
+  argint(0, &condvar_id);
+  conditional_wakeup(condvar_id);
+  return 0;
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..de3b50f 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -7,6 +7,7 @@
 #include "defs.h"
 
 struct spinlock tickslock;
+struct conditional_var conditionals[NPROC];
 uint ticks;
 
 extern char trampoline[], uservec[], userret[];
@@ -19,6 +20,7 @@ extern int devintr();
 void
 trapinit(void)
 {
+  for(int i=0; i<NPROC; i++) initlock(&conditionals[i].mutex, "condvar");
   initlock(&tickslock, "time");
 }
 
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..5b5fd3e 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -288,6 +288,11 @@ freewalk(pagetable_t pagetable)
 
 // Free user memory pages,
 // then free page-table pages.
+void uvmfree_th(pagetable_t pagetable, uint64 sz){
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
 void
 uvmfree(pagetable_t pagetable, uint64 sz)
 {
@@ -303,6 +308,33 @@ uvmfree(pagetable_t pagetable, uint64 sz)
 // returns 0 on success, -1 on failure.
 // frees any allocated pages on failure.
 int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      //kfree(pa);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+int
 uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 {
   pte_t *pte;
diff --git a/user/locks.h b/user/locks.h
new file mode 100644
index 0000000..ae524a1
--- /dev/null
+++ b/user/locks.h
@@ -0,0 +1,104 @@
+#ifndef __LOCKS__
+#define __LOCKS__
+#include "kernel/types.h"
+#include "kernel/param.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+#include "user.h"
+#include "user/queue.h"
+
+// Mutual exclusion lock.
+struct thread_spinlock {
+  uint8 locked;       // Is the lock held?
+  int pid; //which process holding it
+};
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+  lk->pid = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  sleep(1);
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0) sleep(1);
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  lk->pid = getpid();
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  lk->pid = 0;
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
+
+// Mutual exclusion lock.
+struct thread_mutex {
+  uint8 locked;       // Is the lock held?
+
+  // For debugging:
+  char *name;        // Name of lock..
+  int pid;
+};
+
+
+
+void
+thread_mutex_init(struct thread_mutex *lk, char* name)
+{
+  lk->name = name;
+  lk->locked = 0;
+  //lk->cpu = 0;
+  lk->pid = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_mutex_lock(struct thread_mutex *lk)
+{
+    // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  sleep(1);
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+
+    // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->pid = getpid();
+}
+
+// Release the lock.
+void
+thread_mutex_unlock(struct thread_mutex *lk)
+{
+  lk->pid = 0;
+
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+}
+#endif
\ No newline at end of file
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..fd782f1
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,106 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/locks.h"
+#include "semaphore.h"
+
+
+struct Queue q;
+
+struct semaphore empty;
+struct semaphore full;
+struct thread_mutex mutex;
+int nextcondvar;
+
+void init_semaphore() {
+    // Initialize mutex lock
+    //pthread_mutex_init(&mutex, NULL);
+    thread_mutex_init(&mutex, "mutex");
+
+    // Initialize semaphore empty with 5
+    //sem_init(&empty, 0, MAX_SIZE);
+    sem_init(&empty, "empty", 5, nextcondvar++);
+
+    // Initialize semaphore full with 0
+    sem_init(&full, "full", 0, nextcondvar++);
+}
+
+void ProducerFunc(void *arg) {
+    printf("%s\n", (char *)arg);
+    int i;
+    for (i = 1; i <= 10; i++) {
+        // Wait for semaphore empty
+        sem_wait(&empty);
+
+        // Wait for mutex lock
+        thread_mutex_lock(&mutex);
+
+        sleep(1);
+        push(&q , i);
+        // q.arr[q.rear] = i;
+        // q.rear = (q.rear + 1) % MAX_SIZE;
+        // q.size++;
+        printf("Producer produced item %d\n", i);
+
+        // Unlock mutex lock
+        thread_mutex_unlock(&mutex);
+
+        // Post semaphore full
+        //printf("here\n");
+        sem_post(&full);
+    }
+    thread_exit();
+    //return NULL;
+}
+
+void ConsumerFunc(void *arg) {
+    printf("%s\n", (char *)arg);
+    int i;
+    for (i = 1; i <= 10; i++) {
+        // Wait for semaphore full
+        sem_wait(&full);
+
+        // Wait for mutex lock
+        thread_mutex_lock(&mutex);
+
+        sleep(1);
+        int item = front(&q);
+        pop(&q);
+
+        // int item = q.arr[q.front];
+        // q.front = (q.front + 1) % MAX_SIZE;
+        // q.size--;
+        printf("Consumer consumed item %d\n", item);
+
+        // Unlock mutex lock
+        thread_mutex_unlock(&mutex);
+
+        // Post semaphore empty
+        sem_post(&empty);
+    }
+    thread_exit();
+    //return NULL;
+}
+
+int main(void) {
+    init_semaphore();
+    nextcondvar = 0;
+
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+	int thread1, thread2;
+
+	s1 = malloc(4096);
+	s2 = malloc(4096);
+
+	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+	thread2 = thread_create(ConsumerFunc, (void*)message2, s2);
+
+	thread_join(thread1);
+	thread_join(thread2);
+
+	exit(0);
+}
diff --git a/user/queue.h b/user/queue.h
new file mode 100644
index 0000000..1513aa7
--- /dev/null
+++ b/user/queue.h
@@ -0,0 +1,35 @@
+#define MAX_SIZE 65
+
+struct Queue {
+    int arr[MAX_SIZE];
+    int front;
+    int rear;
+    int size;
+};
+
+void initialize(struct Queue *queue) {
+    queue->front = 0;
+    queue->rear = 0;
+    queue->size = 0;
+}
+
+void push(struct Queue *queue, int x) {
+    if (queue->size < MAX_SIZE) {
+        queue->arr[queue->rear] = x;
+        queue->rear = (queue->rear + 1) % MAX_SIZE;
+        queue->size++;
+    }
+}
+
+int front(struct Queue *queue) {
+    if (queue->size == 0)
+        return -1;
+    return queue->arr[queue->front];
+}
+
+void pop(struct Queue *queue) {
+    if (queue->size > 0) {
+        queue->front = (queue->front + 1) % MAX_SIZE;
+        queue->size--;
+    }
+}
diff --git a/user/semaphore.h b/user/semaphore.h
new file mode 100644
index 0000000..bf8f58c
--- /dev/null
+++ b/user/semaphore.h
@@ -0,0 +1,39 @@
+#ifndef __SEM__
+#define __SEM__
+#include "user/locks.h"
+struct semaphore
+{
+  int cnt;
+  int condvar;
+  struct thread_mutex mutex;
+  char* name;
+};
+
+void sem_init(struct semaphore *s, char* nm, int value, int cond){
+    s->cnt = value;
+    thread_mutex_init(&s->mutex, "mutex");
+    s->condvar = cond;
+    s->name = nm;
+}
+
+void sem_wait(struct semaphore *s){
+    thread_mutex_lock(&s->mutex);
+    //printf("in sem wait, name: %s, cnt: %d\n", s->name, s->cnt);
+    while(s->cnt <= 0){
+        thread_mutex_unlock(&s->mutex);
+        conditional_wait(s->condvar);
+        thread_mutex_lock(&s->mutex);
+    }
+    s->cnt--;
+    thread_mutex_unlock(&s->mutex);
+}
+
+void sem_post(struct semaphore * s){
+    //printf("jereererrer\n");
+    thread_mutex_lock(&s->mutex);
+    s->cnt++;
+    //printf("in sem post, name: %s, cnt: %d\n", s->name, s->cnt);
+    conditional_wakeup(s->condvar);
+    thread_mutex_unlock(&s->mutex);
+}
+#endif
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..39cff63
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,77 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/locks.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i;
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;
+}
+
+struct thread_spinlock spinlock;
+struct thread_mutex mutex;
+
+void do_work(void *arg){
+    int i;
+    int old;
+
+    struct balance *b = (struct balance*) arg;
+    printf( "Starting do_work: s:%s\n", b->name);
+
+    for (i = 0; i < b->amount; i++) {
+        // lock and mlock will be implemented by you.
+         //thread_spin_lock(&spinlock);
+          thread_mutex_lock(&mutex);
+         old = total_balance;
+         //printf("%d\n", i);
+         delay(100000);
+	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         //thread_spin_unlock(&spinlock);
+          thread_mutex_unlock(&mutex);
+
+    }
+
+    printf( "Done s:%x\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 500};
+  struct balance b2 = {"b2", 100};
+
+  //thread_spin_init(&lock,"thread_spinlock");
+  thread_mutex_init(&mutex, "mutex");
+
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..569d87f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+int thread_exit(void);
+void conditional_wait(int condvar_id);
+void conditional_wakeup(int condvar_id);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..578a589 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("conditional_wait");
+entry("conditional_wakeup");
