diff --git a/Makefile b/Makefile
index 39a99d7..b3663db 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..8dca9c0 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -1,3 +1,4 @@
+#include "syscall_stat.h"
 struct buf;
 struct context;
 struct file;
@@ -8,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct syscall_stat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +108,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+extern struct spinlock lock;
+void structinit(void);
+int sysstat(int, uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -140,6 +145,9 @@ void            argaddr(int, uint64 *);
 int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
 void            syscall();
+extern char* syscall_names[];
+extern struct syscall_stat allsys_st[25];
+void getst(int, struct syscall_stat*);
 
 // trap.c
 extern uint     ticks;
diff --git a/kernel/file.c b/kernel/file.c
index 25fa226..77d131d 100644
--- a/kernel/file.c
+++ b/kernel/file.c
@@ -94,7 +94,7 @@ filestat(struct file *f, uint64 addr)
     ilock(f->ip);
     stati(f->ip, &st);
     iunlock(f->ip);
-    if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
+    if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)       //copy st's info into addr 
       return -1;
     return 0;
   }
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..1760896 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -4,6 +4,7 @@
 #include "riscv.h"
 #include "defs.h"
 
+
 volatile static int started = 0;
 
 // start() jumps here in supervisor mode on all CPUs.
@@ -30,7 +31,8 @@ main()
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
     __sync_synchronize();
-    started = 1;
+    started = 1;    
+    structinit();     //proc.c---
   } else {
     while(started == 0)
       ;
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..898ee61 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "syscall_stat.h"
 
 struct cpu cpus[NCPU];
 
@@ -254,6 +255,21 @@ userinit(void)
   release(&p->lock);
 }
 
+//for history---
+struct spinlock lock;
+void
+structinit()
+{
+  for(int i=1; i<=23; i++) {
+    allsys_st[i].syscall_cnt = 0;
+    allsys_st[i].syscall_time = 0;
+    strncpy(allsys_st[i].sys_name, syscall_names[i], strlen(syscall_names[i]));
+  }
+
+  
+  initlock(&lock, "my_lock");
+}
+
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
 int
@@ -321,7 +337,7 @@ fork(void)
   acquire(&np->lock);
   np->state = RUNNABLE;
   release(&np->lock);
-
+  np->traceSysID = 0;
   return pid;
 }
 
@@ -681,3 +697,21 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+
+//systat function called from sysproc.c - history()
+// addr is a user virtual address, pointing to a struct stat.
+
+int sysstat(int syscall_no, uint64 addr) 
+{
+    struct proc *p = myproc();
+    struct syscall_stat st;     // getst( *st)  
+
+    getst(syscall_no, &st);    
+
+    if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0) {
+        return -1;
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..dc20719 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int traceSysID;                 //id of the process that are being traced
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..a8b27dc 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,7 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+#include "syscall_stat.h"
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -52,11 +53,18 @@ argraw(int n)
   return -1;
 }
 
+// Array to store the arguments  of a system call
+int arg_int[7];
+uint64 arg_addr[7];
+char* arg_str[7] = {};
+
 // Fetch the nth 32-bit system call argument.
 void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+  arg_int[n] = *ip;
+
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +74,7 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  arg_addr[n] = *ip;
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -76,9 +85,21 @@ argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
-  return fetchstr(addr, buf, max);
+  int ret = fetchstr(addr, buf, max);
+  arg_str[n] = buf;
+  return ret;
+}
+
+struct syscall_stat allsys_st[25];
+
+// to get the struct corresponding to the syscall
+void 
+getst(int syscall_no, struct syscall_stat *st)
+{
+  *st = allsys_st[syscall_no];
 }
 
+
 // Prototypes for the functions that handle system calls.
 extern uint64 sys_fork(void);
 extern uint64 sys_exit(void);
@@ -101,6 +122,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +150,68 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history] sys_history,
+};
+
+
+//a mapping for getting the corresponding arguments
+// where 0 = nothing, 1 = int, 2 = pointer
+
+static char *arg_mapping[] = {
+[SYS_fork]    "000000",
+[SYS_exit]    "100000",
+[SYS_wait]    "200000",
+[SYS_pipe]    "200000",
+[SYS_read]    "121000",
+[SYS_kill]    "100000", 
+[SYS_exec]    "320000",
+[SYS_fstat]   "120000",
+[SYS_chdir]   "300000",
+[SYS_dup]     "100000",
+[SYS_getpid]  "000000",
+[SYS_sbrk]    "100000",
+[SYS_sleep]   "100000",
+[SYS_uptime]  "000000",
+[SYS_open]    "310000",
+[SYS_write]   "121000",
+[SYS_mknod]   "311000",
+[SYS_unlink]  "300000",
+[SYS_link]    "330000",
+[SYS_mkdir]   "300000",
+[SYS_close]   "100000",
+[SYS_trace]   "100000",
+[SYS_history] "120000",
 };
 
+char* syscall_names[]={
+    "",
+    "fork",
+    "exit",
+    "wait",
+    "pipe",
+    "read",
+    "kill",
+    "exec",
+    "fstat",
+    "chdir",
+    "dup",
+    "getpid",
+    "sbrk",
+    "sleep",
+    "uptime",
+    "open",
+    "write",
+    "mknod",
+    "unlink",
+    "link",
+    "mkdir",
+    "close",
+    "trace",
+    "history"
+};
+
+
 void
 syscall(void)
 {
@@ -135,10 +219,34 @@ syscall(void)
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
+
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+
+    //for history 
+    int ticks_before = ticks;
     p->trapframe->a0 = syscalls[num]();
+    int ticks_after = ticks;
+
+    acquire(&lock);
+    allsys_st[num].syscall_cnt++;
+    allsys_st[num].syscall_time += (ticks_after - ticks_before);
+    release(&lock);
+
+    if( p->traceSysID == num ){
+      printf("pid: %d, syscall: %s, args: (", p->pid, syscall_names[num]);
+     
+      char* args = arg_mapping[num];
+      for(int i=0; i<6; i++) {
+        if(args[i] == '1') printf("%d", arg_int[i]);
+        else if(args[i] == '2') printf("%p", arg_addr[i]);
+        else if(args[i] == '3') printf("%s", arg_str[i]);
+        if(args[i+1] != '0' && i+1 < 6) printf(", ");
+      }
+      printf("), return: %d\n", p->trapframe->a0);
+    }
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..4733bc4 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history 23
\ No newline at end of file
diff --git a/kernel/syscall_stat.h b/kernel/syscall_stat.h
new file mode 100644
index 0000000..714cd15
--- /dev/null
+++ b/kernel/syscall_stat.h
@@ -0,0 +1,9 @@
+#ifndef __sys_stat__
+#define __sys_stat__
+struct syscall_stat
+{
+    char sys_name[30];
+    int syscall_cnt;
+    int syscall_time;
+};
+#endif
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..b8ac919 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "syscall_stat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,28 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int traceSysID;
+  argint(0, &traceSysID);
+  if(traceSysID < 0)
+    return -1;
+
+  myproc()->traceSysID = traceSysID;
+  return 0;
+}
+
+uint64
+sys_history(void)
+{
+  //code for history
+  int syscall_no;
+  uint64 st;
+
+  argint(0, &syscall_no); // system call no 
+  argaddr(1, &st); //got the struct addr in st
+  return sysstat(syscall_no, st);
+
+}
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..f348052
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,33 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/syscall_stat.h"
+
+int
+main(int argc, char *argv[])
+{
+    if(argc > 2 || (argc == 2 && (argv[1][0] < '0' || argv[1][0] > '9'))) {
+        printf("Usage: %s sys_call_num command\n", argv[0]);
+        exit(1);
+    }
+    struct syscall_stat st;
+    
+    if(argc == 1) {
+        for(int i=1; i<=23; i++) {
+            history(i, &st);
+            printf("%d:    syscall: %s, #: %d, time: %d\n", i, st.sys_name, st.syscall_cnt, st.syscall_time);
+        }
+    }
+    else {
+        if(argc == 2) {
+            if(atoi(argv[1]) > 23) {
+                printf("syscall not found\n");
+                exit(1);
+            }
+            history(atoi(argv[1]), &st);
+            printf("%d:    syscall: %s, #: %d, time: %d\n", atoi(argv[1]), st.sys_name, st.syscall_cnt, st.syscall_time);
+        }
+    }
+    exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..764f132 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct syscall_stat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int sys_id, struct syscall_stat*);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..83a6248 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
\ No newline at end of file
